/*
 * Filename: Server.java
 * Author: Lara Aras
 * Created: 04/10/2021
 * Operating System: Windows 10 Enterprise
 * Version: Project 1
 * Description: This file contains the functionality for the server GUI,
 *              listening for and responding to client requests, and starting 
 *              or stopping the server.
 */
package animalsearchengineserver;

import java.awt.event.*;
import java.io.*;
import java.net.*;
import java.util.*;
import javax.swing.*;

/**
 * Panel for the server.
 *
 * @author laraa
 */
public class Server extends javax.swing.JFrame {

    private ServerSocket serverSocket;
    private boolean listening;

    /**
     * Version: Project 1
     * <p>
     * Date: 04/10/2021
     * <p>
     * Creates new frame Server and adds window listener to close server socket
     * when application closes.
     *
     * @author Lara Aras
     */
    public Server() {
        initComponents();

        /* Force login before closing server to disallow non-admin users to
           stop the server */
        JFrame frame = (JFrame) this;
        addWindowListener(new WindowAdapter() {
            public void windowClosing(WindowEvent evt) {
                LoginForm loginForm = new LoginForm();

                int result = JOptionPane.showConfirmDialog(frame, loginForm,
                        "Please log in first.", JOptionPane.OK_CANCEL_OPTION);

                String response = "";
                if (result == JOptionPane.OK_OPTION) {
                    response = logUserIn(loginForm.usernameField.getText(),
                            String.valueOf(loginForm.passwordField.getPassword()));
                }

                if (response.equals("success")) {
                    listening = false;

                    try {
                        /* Close the server socket at port 16000 */
                        serverSocket.close();
                    } catch (IOException e) {
                    }

                    /* Exit the application */
                    System.exit(0);
                } else if (response.equals("failure")) {
                    JOptionPane.showMessageDialog(frame, "Invalid login. "
                            + "Please try again", "Error", JOptionPane.ERROR_MESSAGE
                    );
                }
            }
        });
    }

    /**
     * Version: Project 1
     * <p>
     * Date: 04/10/2021
     * <p>
     * Starts the server.
     *
     * @author Lara Aras
     */
    public void initServer() {
        try {
            /* Create the server socket at port 16000 */
            serverSocket = new ServerSocket(16000);

            /* Start waiting for connections */
            listening = true;
        } catch (IOException e) {
            System.out.println(e.toString());
        }

        while (listening) {
            try {
                /* Create a client socket and start a new client session */
                new Session(serverSocket.accept());
            } catch (IOException e) {
            }
        }
    }

    /**
     * Version: Project 1
     * <p>
     * Date: 08/10/2021
     * <p>
     * Sends login request to handler class and returns response.
     *
     * @author Lara Aras
     * @return response
     */
    private String logUserIn(String username, String password) {
        HashMap request = new HashMap();
        request.put("action", "login");
        request.put("username", username);
        request.put("password", password);

        HandleClientRequest handler = new HandleClientRequest();

        /* handleRequest function returns a string to be sent
                           as a response to the client */
        String response = handler.handleRequest(request);
        return response;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        serverGUIPanel = new javax.swing.JPanel();
        serverHeadingLabel = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);

        serverHeadingLabel.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        serverHeadingLabel.setText("Server Admin");

        jLabel1.setText("The server is currently running.");

        jLabel2.setText("Close the application to stop the server.");

        javax.swing.GroupLayout serverGUIPanelLayout = new javax.swing.GroupLayout(serverGUIPanel);
        serverGUIPanel.setLayout(serverGUIPanelLayout);
        serverGUIPanelLayout.setHorizontalGroup(
            serverGUIPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(serverGUIPanelLayout.createSequentialGroup()
                .addGroup(serverGUIPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(serverGUIPanelLayout.createSequentialGroup()
                        .addGap(147, 147, 147)
                        .addComponent(serverHeadingLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 162, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(serverGUIPanelLayout.createSequentialGroup()
                        .addGap(139, 139, 139)
                        .addComponent(jLabel1))
                    .addGroup(serverGUIPanelLayout.createSequentialGroup()
                        .addGap(116, 116, 116)
                        .addComponent(jLabel2)))
                .addContainerGap(140, Short.MAX_VALUE))
        );
        serverGUIPanelLayout.setVerticalGroup(
            serverGUIPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(serverGUIPanelLayout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addComponent(serverHeadingLabel)
                .addGap(28, 28, 28)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel2)
                .addContainerGap(88, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(serverGUIPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(serverGUIPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel serverGUIPanel;
    private javax.swing.JLabel serverHeadingLabel;
    // End of variables declaration//GEN-END:variables
}

/**
 * Class used to initiate a session for each client request so that the server
 * can continue listening for other client requests while the current request is
 * being handled.
 *
 * @author Lara Aras
 */
class Session implements Runnable {

    private Socket clientSocket;
    private ObjectInputStream objInputStream;
    private PrintStream outputStream;
    private Thread runner;

    /**
     * Version: Project 1
     * <p>
     * Date: 04/10/2021
     * <p>
     * Constructor for the class. Opens input and output streams and starts
     * thread.
     *
     * @author Lara Aras
     * @param socket
     */
    Session(Socket socket) {
        clientSocket = socket;

        try {
            /* Create object input stream to receive HashMap containing 
               request from client */
            objInputStream = new ObjectInputStream(clientSocket.getInputStream());

            /* Create print stream to return response to client */
            outputStream = new PrintStream(clientSocket.getOutputStream());
        } catch (IOException ioe) {
            System.out.println(ioe.toString());
        }

        /* Start the thread */
        if (runner == null) {
            runner = new Thread(this);
            runner.start();
        }
    }

    /**
     * Version: Project 1
     * <p>
     * Date: 04/10/2021
     * <p>
     * Runs thread, sends request to handler class, returns response to client,
     * and closes streams and sockets and ends thread after completion.
     *
     * @author Lara Aras
     * @param socket
     */
    public void run() {
        while (runner == Thread.currentThread()) {
            try {
                HashMap input = (HashMap) objInputStream.readObject();

                if (input != null) {
                    HandleClientRequest handler = new HandleClientRequest();

                    /* handleRequest function returns a string to be sent
                           as a response to the client */
                    String response = handler.handleRequest(input);
                    outputStream.println(response);
                }

                /* Stop thread, close input stream and client socket */
                runner = null;
                objInputStream.close();
                outputStream.close();
                clientSocket.close();
            } catch (IOException e) {
                JOptionPane.showMessageDialog(null, "An error has occured:\n"
                        + e.toString(),
                        "Error", JOptionPane.ERROR_MESSAGE
                );
            } catch (ClassNotFoundException e) {
                /* For readObject() method of ObjectInputStream */
                JOptionPane.showMessageDialog(null, "An error has occured:\n"
                        + e.toString(),
                        "Error", JOptionPane.ERROR_MESSAGE
                );
            }

            try {
                Thread.sleep(10);
            } catch (InterruptedException ie) {
            }
        }
    }
}
